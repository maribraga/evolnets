[{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://maribraga.github.io/evolnets/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 Mariana P Braga  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. evolnets Copyright (C) 2020 Mariana P Braga This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://maribraga.github.io/evolnets/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mariana P Braga. Author, maintainer. Wouter van der Bijl. Author. Michael Landis. Author.","code":""},{"path":"https://maribraga.github.io/evolnets/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"P Braga M, van der Bijl W, Landis M (2025). evolnets: Reconstruct Ancestral Networks Inferred RevBayes. R package version 0.0.0.9000, https://maribraga.github.io/evolnets/, https://github.com/maribraga/evolnets.","code":"@Manual{,   title = {evolnets: Reconstruct Ancestral Networks Inferred In RevBayes},   author = {Mariana {P Braga} and Wouter {van der Bijl} and Michael Landis},   year = {2025},   note = {R package version 0.0.0.9000,     https://maribraga.github.io/evolnets/},   url = {https://github.com/maribraga/evolnets}, }"},{"path":"https://maribraga.github.io/evolnets/index.html","id":"evolnets","dir":"","previous_headings":"","what":"Reconstruct Ancestral Networks Inferred In RevBayes","title":"Reconstruct Ancestral Networks Inferred In RevBayes","text":"RevBayes offers models infer host-repertoire evolution, tools parse outputs. evolnets necessary tools reconstruct ancestral ecological networks based posterior probabilities interactions.","code":""},{"path":"https://maribraga.github.io/evolnets/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reconstruct Ancestral Networks Inferred In RevBayes","text":"can install evolnets like :","code":"# install.packages(\"devtools\") # library(devtools)  devtools::install_github(\"maribraga/evolnets\", build_vignettes = FALSE)"},{"path":"https://maribraga.github.io/evolnets/reference/events_counter.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the rate of host-repertoire evolution — events_counter","title":"Calculate the rate of host-repertoire evolution — events_counter","text":"Calculate number host gains, host losses, effective rate host repertoire evolution.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/events_counter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the rate of host-repertoire evolution — events_counter","text":"","code":"count_events(history)  effective_rate(history, tree)  count_gl(history)  rate_gl(history, tree)"},{"path":"https://maribraga.github.io/evolnets/reference/events_counter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the rate of host-repertoire evolution — events_counter","text":"history data frame containing character history produced RevBayes read read_history(). tree phylogenetic tree symbiont clade","code":""},{"path":"https://maribraga.github.io/evolnets/reference/events_counter.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate the rate of host-repertoire evolution — events_counter","text":"count_events(): Get average number events along symbiont tree highest posterior density interval 95% probability (HPD95), based MCMC iterations history. effective_rate(): Get effective rate evolution, .e. number events per branch unit, along tree branch. Mean HP95 outputted. count_gl(): Get average number host gains host losses rate_gl(): Get average effective rate host gain host loss","code":""},{"path":"https://maribraga.github.io/evolnets/reference/events_counter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the rate of host-repertoire evolution — events_counter","text":"","code":"# read data that comes with the package data_path <- system.file(\"extdata\", package = \"evolnets\") tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\")) history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)  # all events n_events <- count_events(history) rate <- effective_rate(history,tree)  # gains and losses separately gl_events <- count_gl(history) gl_rates <- rate_gl(history, tree)"},{"path":"https://maribraga.github.io/evolnets/reference/evolnets.html","id":null,"dir":"Reference","previous_headings":"","what":"evolnets: a package for summarizing inference of network evolution — evolnets","title":"evolnets: a package for summarizing inference of network evolution — evolnets","text":"evolnets package provides three categories important functions: rates, ancestral states samples.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/evolnets.html","id":"rates","dir":"Reference","previous_headings":"","what":"Rates","title":"evolnets: a package for summarizing inference of network evolution — evolnets","text":"functions used calculate effective rates host-repertoire evolution: effective_rate( ), count_events( ), rate_gl( ), count_gl( ).","code":""},{"path":"https://maribraga.github.io/evolnets/reference/evolnets.html","id":"ancestral-states","dir":"Reference","previous_headings":"","what":"Ancestral states","title":"evolnets: a package for summarizing inference of network evolution — evolnets","text":"functions used calculate posterior probabilities host-parasite interactions internal nodes parasite tree specific time points past: posterior_at_nodes( ), posterior_at_ages( ).","code":""},{"path":"https://maribraga.github.io/evolnets/reference/evolnets.html","id":"samples","dir":"Reference","previous_headings":"","what":"Samples","title":"evolnets: a package for summarizing inference of network evolution — evolnets","text":"functions perform calculations sampled host-parasite network MCMC: samples_at_ages( ), Q_posterior_at_ages( ), NODF_posterior_at_ages( ).","code":""},{"path":"https://maribraga.github.io/evolnets/reference/evolnets.html","id":"more-information","dir":"Reference","previous_headings":"","what":"More information","title":"evolnets: a package for summarizing inference of network evolution — evolnets","text":"Run vignette(\"intro_to_evolnets\") example use package.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/extant_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Extant network — extant_net","title":"Extant network — extant_net","text":"Extant network","code":""},{"path":"https://maribraga.github.io/evolnets/reference/extant_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extant network — extant_net","text":"","code":"extant_net"},{"path":"https://maribraga.github.io/evolnets/reference/extant_net.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Extant network — extant_net","text":"matrix: incidence matrix interactions 66 Pieridae genera (rows) 33 angiosperm families (cols)","code":""},{"path":"https://maribraga.github.io/evolnets/reference/extant_net.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Extant network — extant_net","text":"https://onlinelibrary.wiley.com/doi/10.1111/ele.13842","code":""},{"path":"https://maribraga.github.io/evolnets/reference/get_sampled_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get posterior samples of networks of interactions of extant lineages at given time points in the past — get_sampled_networks","title":"Get posterior samples of networks of interactions of extant lineages at given time points in the past — get_sampled_networks","text":"Get posterior samples networks interactions extant lineages given time points past","code":""},{"path":"https://maribraga.github.io/evolnets/reference/get_sampled_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get posterior samples of networks of interactions of extant lineages at given time points in the past — get_sampled_networks","text":"","code":"get_sampled_networks(at_ages, state = 2, ages = NULL)"},{"path":"https://maribraga.github.io/evolnets/reference/get_sampled_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get posterior samples of networks of interactions of extant lineages at given time points in the past — get_sampled_networks","text":"at_ages List lists, samples posterior probabilities interaction extant lineages given ages. Usually calculated posterior_at_ages, see example. state state? Default 2. analyses using 3-state model, choose 1, 2 using c(1, 2) (1 potential host 2 actual host). Note also applied extant network. ages Vector ages (time points past) samples retrieved. default, uses ages present pp_at_ages.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/get_sampled_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get posterior samples of networks of interactions of extant lineages at given time points in the past — get_sampled_networks","text":"list arrays, one age. Arrays contain sampled networks.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/get_sampled_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get posterior samples of networks of interactions of extant lineages at given time points in the past — get_sampled_networks","text":"","code":"# read data that comes with the package data_path <- system.file(\"extdata\", package = \"evolnets\") tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\")) host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\")) history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)  # choose ages ages <- c(60, 50, 40, 0)  # calculate posterior probability of interactions at_ages <- posterior_at_ages(history, ages, tree, host_tree)  # get sampled networks sampled_nets <- get_sampled_networks(at_ages)"},{"path":"https://maribraga.github.io/evolnets/reference/get_summary_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary networks from posterior probabilities of interactions of extant lineages at given time points in the past — get_summary_networks","title":"Get summary networks from posterior probabilities of interactions of extant lineages at given time points in the past — get_summary_networks","text":"Get summary networks posterior probabilities interactions extant lineages given time points past","code":""},{"path":"https://maribraga.github.io/evolnets/reference/get_summary_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary networks from posterior probabilities of interactions of extant lineages at given time points in the past — get_summary_networks","text":"","code":"get_summary_networks(   at_ages,   threshold,   ages = NULL,   weighted = TRUE,   type = \"states\",   state = 2,   repertoire = \"fundamental\" )"},{"path":"https://maribraga.github.io/evolnets/reference/get_summary_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary networks from posterior probabilities of interactions of extant lineages at given time points in the past — get_summary_networks","text":"at_ages List lists, samples posterior probabilities interaction extant lineages given ages. Usually calculated posterior_at_ages, see example. threshold Probability threshold include interaction network. Interactions posterior probability < threshold dropped. ages Vector ages (time points past) samples retrieved. default, uses ages present pp_at_ages. weighted Logical. Use posterior probabilities interaction weights? type One 'states' 'repertoires'. 'states', plot presence state posterior probablity higher threshold. 'repertoires', plot given repertoire. Note also applied extant network. state state? Default 2. analyses using 3-state model, choose 1, 2 using c(1, 2) (1 potential host 2 actual host). used type 'states'. Note also applied extant network. repertoire Either 'realized' repertoire defined state 2, 'fundamental' repertoire (default) defined state (usually 1 2), 3-state model includes actual potential hosts. Note also applied extant network.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/get_summary_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary networks from posterior probabilities of interactions of extant lineages at given time points in the past — get_summary_networks","text":"list incidence matrices (summary network) time slice ages.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/get_summary_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get summary networks from posterior probabilities of interactions of extant lineages at given time points in the past — get_summary_networks","text":"","code":"# read data that comes with the package data_path <- system.file(\"extdata\", package = \"evolnets\") tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\")) host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\")) history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)  # choose ages in the past ages <- c(60, 50, 40, 0)  # calculate posterior probabilities of interactions at_ages <- posterior_at_ages(history, ages, tree, host_tree)  # get ancestral summary networks weighted_net_50 <- get_summary_networks(at_ages, threshold = 0.5, weighted = TRUE) binary_net_90 <- get_summary_networks(at_ages, threshold = 0.9, weighted = FALSE)"},{"path":"https://maribraga.github.io/evolnets/reference/history.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for Pieridae butterflies and their host plants from Braga et al. 2021 — history","title":"Data for Pieridae butterflies and their host plants from Braga et al. 2021 — history","text":"Data Pieridae butterflies host plants Braga et al. 2021","code":""},{"path":"https://maribraga.github.io/evolnets/reference/history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for Pieridae butterflies and their host plants from Braga et al. 2021 — history","text":"","code":"history"},{"path":"https://maribraga.github.io/evolnets/reference/history.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for Pieridae butterflies and their host plants from Braga et al. 2021 — history","text":"history: data frame 58,891 rows 14 columns: iteration MCMC iteration posterior, likelihood, prior Probabilities node_index Index tree node branch_start_time, branch_end_time Time branch starts ends start state, end state Host repertoire start end given branch transition_time Time event (host gain loss) happened parent_index, child1_index, child2_index Index parent child nodes","code":""},{"path":"https://maribraga.github.io/evolnets/reference/history.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for Pieridae butterflies and their host plants from Braga et al. 2021 — history","text":"https://onlinelibrary.wiley.com/doi/10.1111/ele.13842","code":""},{"path":"https://maribraga.github.io/evolnets/reference/history.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data for Pieridae butterflies and their host plants from Braga et al. 2021 — history","text":"data frame contains MCMC samples analysis host-repertoire evolution across Pieridae, done RevBayes","code":""},{"path":"https://maribraga.github.io/evolnets/reference/host_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Host plants tree — host_tree","title":"Host plants tree — host_tree","text":"Host plants tree","code":""},{"path":"https://maribraga.github.io/evolnets/reference/host_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Host plants tree — host_tree","text":"","code":"host_tree"},{"path":"https://maribraga.github.io/evolnets/reference/host_tree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Host plants tree — host_tree","text":"host_tree: phylogenetic tree angiosperm families 50 tips.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/host_tree.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Host plants tree — host_tree","text":"https://onlinelibrary.wiley.com/doi/10.1111/ele.13842","code":""},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior distribution of network structure indices across ancestral networks — index_at_ages_samples","title":"Posterior distribution of network structure indices across ancestral networks — index_at_ages_samples","text":"Calculate z-scores nestedness (NODF) modularity (Q) MCMC sample time points past based null networks interactions probability. calculating z-scores, can compare ancestral networks different ages.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior distribution of network structure indices across ancestral networks — index_at_ages_samples","text":"","code":"index_at_ages_samples(   sampled_networks,   index,   ages = NULL,   nnull = 100,   use_future = FALSE )"},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior distribution of network structure indices across ancestral networks — index_at_ages_samples","text":"sampled_networks List ancestral networks sampled across MCMC given ages. Usually output get_sampled_networks, see example. index Index calculated ancestral network. \"NODF\" calculate nestedness \"Q\" calculate modularity. ages Vector ages (time points past) ancestral networks. default, uses ages present sampled_networks. nnull Number null networks generate calculate z-score. Default 100. use_future Parallelize package future? Logical. applicable modularity calculation.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior distribution of network structure indices across ancestral networks — index_at_ages_samples","text":"data.frame z-scores p-values across samples ages.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior distribution of network structure indices across ancestral networks — index_at_ages_samples","text":"","code":"# read data that comes with the package data_path <- system.file(\"extdata\", package = \"evolnets\") tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\")) host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\")) history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)  # get sampled networks at ages in the past ages <- c(60,50,40,0) samples_at_ages <- posterior_at_ages(history, ages, tree, host_tree) sampled_networks <- get_sampled_networks(samples_at_ages)  # calculate posterior distribution of nestedness Nz <- index_at_ages_samples(sampled_networks, index = \"NODF\")  #  calculate posterior distribution of modularity with parallelization (slower) # Qz <- index_at_ages_samples(sampled_networks, index = \"Q\", use_future = TRUE)"},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Network structure indices across ancestral summary networks and extant network — index_at_ages_summary","title":"Network structure indices across ancestral summary networks and extant network — index_at_ages_summary","text":"Calculate z-scores nestedness (NODF) modularity (Q) ancestral network time points past extant network, based null networks interactions probability. calculating z-scores, can compare ancestral networks different ages.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network structure indices across ancestral summary networks and extant network — index_at_ages_summary","text":"","code":"index_at_ages_summary(   summary_networks,   index,   ages = NULL,   nnull = 100,   use_future = FALSE )"},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network structure indices across ancestral summary networks and extant network — index_at_ages_summary","text":"summary_networks List ancestral networks given ages extant network. Usually output get_summary_networks, see example. index Index calculated ancestral network. \"NODF\" calculate nestedness \"Q\" calculate modularity. weighted networks, \"weighted NODF\" calculated. ages Vector ages (time points past) ancestral networks. default, uses ages present summary_networks. nnull Number null networks generate calculate z-score. Default 100. use_future Parallelize package future? Logical. applicable modularity calculation.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network structure indices across ancestral summary networks and extant network — index_at_ages_summary","text":"data.frame z-scores p-values across networks.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/index_at_ages_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network structure indices across ancestral summary networks and extant network — index_at_ages_summary","text":"","code":"# read data that comes with the package data_path <- system.file(\"extdata\", package = \"evolnets\") tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\")) host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\")) history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"))  # get ancestral networks at ages in the past ages <- c(60, 50, 40, 0) at_ages <- posterior_at_ages(history, ages, tree, host_tree) summary_networks <- get_summary_networks(at_ages, threshold = 0.5, weighted = TRUE)  # calculate nestedness of ancestral and extant networks Nz <- index_at_ages_summary(summary_networks, index = \"NODF\")  # calculate modularity of ancestral and extant networks with parallelization (slower) # Qz <- index_at_ages_summary(summary_networks, index = \"Q\", use_future = TRUE)"},{"path":"https://maribraga.github.io/evolnets/reference/match_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"Match modules of different ancestral networks across time. — match_modules","title":"Match modules of different ancestral networks across time. — match_modules","text":"function called within modules_across_ages() gives name modules ancestral networks different ages contain symbiont species parental species.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/match_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match modules of different ancestral networks across time. — match_modules","text":"","code":"match_modules(summary_networks, unmatched_modules, tree)"},{"path":"https://maribraga.github.io/evolnets/reference/match_modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match modules of different ancestral networks across time. — match_modules","text":"summary_networks List reconstructed summary networks age. unmatched_modules data frame outputted modules_from_summary_networks() containing: $name network node (hosts symbionts), $age network, $original_module assigned node, $type node (either \"symbiont\" \"host). tree phylogeny symbiont clade (e.g. parasite, herbivore), phylo object.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/match_modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match modules of different ancestral networks across time. — match_modules","text":"list two elements: 1) data frame containing module information node network; 2) data frame correspondence original matched module names network.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/match_modules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match modules of different ancestral networks across time. — match_modules","text":"","code":"if (FALSE) { # \\dontrun{ unmatched_modules <- modules_from_summary_networks(summary_networks) matched_modules <- match_modules(summary_networks, unmatched_modules[[1]], tree) } # }"},{"path":"https://maribraga.github.io/evolnets/reference/modules_across_ages.html","id":null,"dir":"Reference","previous_headings":"","what":"Evolution of modules: find and match modules across time slices — modules_across_ages","title":"Evolution of modules: find and match modules across time slices — modules_across_ages","text":"Evolution modules: find match modules across time slices","code":""},{"path":"https://maribraga.github.io/evolnets/reference/modules_across_ages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evolution of modules: find and match modules across time slices — modules_across_ages","text":"","code":"modules_across_ages(summary_networks, tree, extant_modules = NULL)"},{"path":"https://maribraga.github.io/evolnets/reference/modules_across_ages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evolution of modules: find and match modules across time slices — modules_across_ages","text":"summary_networks List reconstructed summary networks age (output get_summary_network()). tree phylogeny symbiont clade (e.g. parasite, herbivore), phylo object. extant_modules moduleWeb object defining modules extant network.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/modules_across_ages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evolution of modules: find and match modules across time slices — modules_across_ages","text":"list : list 2 elements: 1.1) data frame containing module information node network, 1.2) data frame correspondence original matched module names network; list 2 elements: 2.1) data frame containing module membership node age matching, 2.2) list moduleWeb objects age.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/modules_across_ages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evolution of modules: find and match modules across time slices — modules_across_ages","text":"","code":"# read data that comes with the package data_path <- system.file(\"extdata\", package = \"evolnets\") tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\")) host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\")) history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)  # get ancestral summary networks ages <- c(60, 50, 40, 0) at_ages <- posterior_at_ages(history, ages, tree, host_tree) summary_networks <- get_summary_networks(at_ages, threshold = 0.5, weighted = TRUE)  # find and match modules across ancestral and extant networks all_mod <- modules_across_ages(summary_networks, tree) #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned. #> ! # Invaild edge matrix for <phylo>. A <tbl_df> is returned."},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Find modules in networks sampled across MCMC at specific time slices — modules_from_samples","title":"Find modules in networks sampled across MCMC at specific time slices — modules_from_samples","text":"Find modules networks sampled across MCMC specific time slices","code":""},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find modules in networks sampled across MCMC at specific time slices — modules_from_samples","text":"","code":"modules_from_samples(sampled_networks)"},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find modules in networks sampled across MCMC at specific time slices — modules_from_samples","text":"sampled_networks List sampled networks time slices produced get_sampled_networks().","code":""},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find modules in networks sampled across MCMC at specific time slices — modules_from_samples","text":"Data frame module membership information sampled network time slice.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find modules in networks sampled across MCMC at specific time slices — modules_from_samples","text":"","code":"if (FALSE) { # \\dontrun{   data_path <- system.file(\"extdata\", package = \"evolnets\")   tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\"))   host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\"))   history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)    ages <- c(60,50,40,0)   at_ages <- posterior_at_ages(history, ages, tree, host_tree)   sampled_networks <- get_sampled_networks(at_ages)   mod_samples <- modules_from_samples(sampled_networks) } # }"},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_summary_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify modules for each summary network at each age — modules_from_summary_networks","title":"Identify modules for each summary network at each age — modules_from_summary_networks","text":"function called within modules_across_ages().","code":""},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_summary_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify modules for each summary network at each age — modules_from_summary_networks","text":"","code":"modules_from_summary_networks(summary_networks, extant_modules = NULL)"},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_summary_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify modules for each summary network at each age — modules_from_summary_networks","text":"summary_networks List reconstructed summary networks age (output get_summary_network()). extant_modules moduleWeb object defining modules extant network.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_summary_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify modules for each summary network at each age — modules_from_summary_networks","text":"list 2 elements: 1) data frame containing module membership node age matching; 2) list moduleWeb objects age.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/modules_from_summary_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify modules for each summary network at each age — modules_from_summary_networks","text":"","code":"if (FALSE) { # \\dontrun{  unmatched_modules <- modules_from_summary_networks(summary_networks) } # }"},{"path":"https://maribraga.github.io/evolnets/reference/mycomputeModules.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified version of bipartite's computeModules function — mycomputeModules","title":"Modified version of bipartite's computeModules function — mycomputeModules","text":"Modified version bipartite's computeModules function","code":""},{"path":"https://maribraga.github.io/evolnets/reference/mycomputeModules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified version of bipartite's computeModules function — mycomputeModules","text":"","code":"mycomputeModules(   web,   method = \"Beckett\",   steps = 1e+06,   tolerance = 1e-10,   forceLPA = FALSE )"},{"path":"https://maribraga.github.io/evolnets/reference/mycomputeModules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified version of bipartite's computeModules function — mycomputeModules","text":"web Incidence matrix method Becket steps steps tolerance tolerance forceLPA FALSE","code":""},{"path":"https://maribraga.github.io/evolnets/reference/mycomputeModules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified version of bipartite's computeModules function — mycomputeModules","text":"Modularity Q","code":""},{"path":"https://maribraga.github.io/evolnets/reference/mycomputeModules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modified version of bipartite's computeModules function — mycomputeModules","text":"","code":"if (FALSE) { # \\dontrun{   data_path <- system.file(\"extdata\", package = \"evolnets\")   extant_net <- read.csv(paste0(data_path,\"/interaction_matrix_pieridae.csv\"), row.names = 1)    mod <- mycomputeModules(extant_net) } # }"},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ancestral networks with module information — plot_ancestral_networks","title":"Plot ancestral networks with module information — plot_ancestral_networks","text":"Plot ancestral networks module information","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ancestral networks with module information — plot_ancestral_networks","text":"","code":"plot_ancestral_networks(   summary_networks,   matched_modules,   tree,   module_levels = NULL,   colors = NULL,   node_size = NULL,   level_names = c(\"Host\", \"Symbiont\") )"},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ancestral networks with module information — plot_ancestral_networks","text":"summary_networks list incidence matrices (summary network) time slice ages. Output get_summary_network() matched_modules list lists containing module information node network. Output modules_across_ages(). tree phylogeny symbiont clade (e.g. parasites, herbivores). Object class phylo. module_levels Order modules organized. Affects color module assigned. NULL, takes order appearance matched_modules$module. colors Color vector used plot module information. node_size Size nodes every network. NULL, default size plotted. level_names Optional string vector two elements used legend: name clade modeled \"host\" name clade modeled \"symbiont\".","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ancestral networks with module information — plot_ancestral_networks","text":"list plots class patchwork. element contains tree network given time slice.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ancestral networks with module information — plot_ancestral_networks","text":"","code":"if (FALSE) { # \\dontrun{   # read data that comes with the package   data_path <- system.file(\"extdata\", package = \"evolnets\")   tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\"))   host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\"))   history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)    # find and match modules of summary networks at ages   ages <- c(60, 50, 40, 0)   at_ages <- posterior_at_ages(history, ages, tree, host_tree)   summary_networks <- get_summary_networks(at_ages, threshold = 0.5, weighted = TRUE)   all_mod <- modules_across_ages(summary_networks, tree)    # plot   plot <- plot_ancestral_networks(summary_networks, all_mod, tree)   patchwork::wrap_plots(plot, guides = \"collect\") } # }"},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ancestral states on the phylogeny. — plot_ancestral_states","title":"Plot ancestral states on the phylogeny. — plot_ancestral_states","text":"Plot ancestral states phylogeny.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ancestral states on the phylogeny. — plot_ancestral_states","text":"","code":"plot_ancestral_states(   tree,   at_nodes,   modules,   module_order = NULL,   type = \"states\",   state = 2,   repertoire = \"fundamental\",   layout = \"rectangular\",   threshold = 0.9,   point_size = 3,   point_shape = NULL,   dodge_width = 0.025,   legend = TRUE,   colors = NULL,   state_alpha = c(0.5, 1),   ladderize = FALSE )"},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ancestral states on the phylogeny. — plot_ancestral_states","text":"tree phylogeny, phylo object. at_nodes list length 2, output posterior_at_nodes(). modules moduleWeb data.frame object defining modules network. data.frame passed, must contain three columns: $name taxon names, $module module taxon assigned , $type defines taxon \"host\" \"symbiont\". module_order character vector giving order modules plotted. contain module . type One 'states' 'repertoires'. 'states', plot presence state posterior probability higher threshold. 'repertoires', plot given repertoire. state state? Default 2. analyses using 3-state model, choose 1 2 (1 potential host 2 actual host). used type 'states'. repertoire Either 'realized' repertoire defined state 2, 'fundamental' repertoire (default) defined state (usually 1 2), 3-state model includes actual potential hosts. layout One 'rectangular', 'slanted', 'fan', 'circular', 'radial', 'equal_angle', 'daylight' 'ape'. threshold posterior probability ancestral states shown. Defaults 90% (0.9). Numeric vector length 1. point_size large ancestral state points , default 3. Play dodge_width get pleasing result. Numeric vector length 1. point_shape point shape used ancestral states? left NULL, reasonable default chosen. Otherwise, numeric vector length 1. dodge_width far points pushed apart, multiple states single node, default 0.025. Play point_size get pleasing result. Numeric vector length 1. legend Whether display legend colors. Logical vector length 1. colors Override default colors. character vector many color values modules. state_alpha numeric vector length 2. Gives alpha (transparency) values interaction type three-state model ladderize Logical. Whether ladderize tree. Default FALSE. ancestral states automatically colored module. change colors used, can add color scales resulting ggplot, e.g. ggplot2::scale_color_manual().","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ancestral states on the phylogeny. — plot_ancestral_states","text":"ggplot object.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_ancestral_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ancestral states on the phylogeny. — plot_ancestral_states","text":"","code":"if (FALSE) { # \\dontrun{   # read data that comes with the package   data_path <- system.file(\"extdata\", package = \"evolnets\")   tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\"))   host_tree <- read.tree(paste0(data_path,\"/host_tree_pieridae.phy\"))   history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)   extant_net <- read.csv(paste0(data_path,\"/interaction_matrix_pieridae.csv\"), row.names = 1)    # calculate posterior probability of interactions at internal nodes   at_nodes <- posterior_at_nodes(history, tree, host_tree, 66 + 1:65)    # find modules in the extant network   mods <- mycomputeModules(extant_net)    # plot ancestral states   plot_ancestral_states(tree, at_nodes, mods)   # Manual colors   plot_ancestral_states(tree, at_nodes, mods, colors = rainbow(20)) } # }"},{"path":"https://maribraga.github.io/evolnets/reference/plot_extant_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a network with modules as an adjacency matrix — plot_extant_matrix","title":"Plot a network with modules as an adjacency matrix — plot_extant_matrix","text":"Plot network modules adjacency matrix","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_extant_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a network with modules as an adjacency matrix — plot_extant_matrix","text":"","code":"plot_extant_matrix(   net,   modules = NULL,   module_order = NULL,   find_modules = TRUE,   parasite_order = NULL,   host_order = NULL,   state_alpha = c(0.5, 1) )"},{"path":"https://maribraga.github.io/evolnets/reference/plot_extant_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a network with modules as an adjacency matrix — plot_extant_matrix","text":"net adjacency matrix bipartite network. Parasites rows, hosts columns. values 0/1 (0/2), binary network represented; values 0/1/2, network potential actual interactions represented; otherwise weighted network assumed. modules moduleWeb data.frame object defining models network. left NULL modules automatically calculated. data.frame passed, must contain three columns: $name taxon names, $module module taxon assigned , $type defines taxon \"host\" \"symbiont\". module_order character vector giving order modules plotted. contain module . find_modules Logical. Search modules nothing provided modules? parasite_order character vector giving order parasite listed . contain parasite , include row names net. host_order character vector giving order hosts listed . contain host , include column names net. state_alpha numeric vector length 2. Gives alpha (transparency) values interaction type three-state model","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_extant_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a network with modules as an adjacency matrix — plot_extant_matrix","text":"ggplot object.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_extant_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a network with modules as an adjacency matrix — plot_extant_matrix","text":"","code":"if (FALSE) { # \\dontrun{   # The slow portion of this function is the calculation of the modules.   plot_extant_matrix(extant_net)    # Change our network to a weighted one:   extant_net_weighted <- extant_net   extant_net_weighted[extant_net == 1] <- runif(sum(extant_net))   plot_extant_matrix(extant_net_weighted) } # }"},{"path":"https://maribraga.github.io/evolnets/reference/plot_index_at_ages.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot network structure indices across ancestral summary, sampled and extant networks — plot_index_at_ages","title":"Plot network structure indices across ancestral summary, sampled and extant networks — plot_index_at_ages","text":"Plot z-scores nestedness (NODF) /modularity (Q) sampled summary networks time points past, calculated index_at_ages_samples index_at_ages_summary.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_index_at_ages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot network structure indices across ancestral summary, sampled and extant networks — plot_index_at_ages","text":"","code":"plot_index_at_ages(   nodf_sampled,   q_sampled = NULL,   nodf_summary = NULL,   q_summary = NULL,   col_sampled = \"#3B9AB2\",   col_summary = \"#E67D00\" )"},{"path":"https://maribraga.github.io/evolnets/reference/plot_index_at_ages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot network structure indices across ancestral summary, sampled and extant networks — plot_index_at_ages","text":"nodf_sampled Output index_at_ages_samples index = \"NODF\". q_sampled Output index_at_ages_samples index = \"Q\". nodf_summary Output index_at_ages_summary index = \"NODF\". q_summary Output index_at_ages_summary index = \"Q\". col_sampled Color used represent values sampled networks. col_summary Color used represent values summary networks.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_index_at_ages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot network structure indices across ancestral summary, sampled and extant networks — plot_index_at_ages","text":"plot z-scores time. Violins show posterior distribution z-scores sampled networks, dots lines showing mean values. Z-scores summary networks extant network shown dots line. Use different colors differentiate values sampled summary networks.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_index_at_ages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot network structure indices across ancestral summary, sampled and extant networks — plot_index_at_ages","text":"","code":"# read data that comes with the package data_path <- system.file(\"extdata\", package = \"evolnets\") tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\")) host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\")) history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)  # calculate posterior probabilities at ages ages <- c(60, 50, 40, 0) at_ages <- posterior_at_ages(history, ages, tree, host_tree)  # summary networks summary_networks <- get_summary_networks(at_ages, threshold = 0.5, weighted = TRUE) Nz_sum <- index_at_ages_summary(summary_networks, index = \"NODF\", nnull = 10)  # sampled networks sampled_networks <- get_sampled_networks(at_ages) Nz_sam <- index_at_ages_samples(sampled_networks, index = \"NODF\", nnull = 10)  # plot plot_index_at_ages(nodf_sampled = Nz_sam, nodf_summary = Nz_sum) #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes."},{"path":"https://maribraga.github.io/evolnets/reference/plot_matrix_phylo.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a network with modules as an adjacency matrix, with aligned phylogenies. — plot_matrix_phylo","title":"Plot a network with modules as an adjacency matrix, with aligned phylogenies. — plot_matrix_phylo","text":"Plot network modules adjacency matrix, aligned phylogenies.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_matrix_phylo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a network with modules as an adjacency matrix, with aligned phylogenies. — plot_matrix_phylo","text":"","code":"plot_matrix_phylo(   net,   at_nodes,   tree,   host_tree,   type = \"states\",   state = 2,   repertoire = \"fundamental\",   modules = NULL,   module_order = NULL,   find_modules = TRUE,   threshold = 0.9,   point_size = 3,   dodge_width = 0.025,   colors = NULL,   ladderize = FALSE )"},{"path":"https://maribraga.github.io/evolnets/reference/plot_matrix_phylo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a network with modules as an adjacency matrix, with aligned phylogenies. — plot_matrix_phylo","text":"net adjacency matrix bipartite network. extant network. Parasites rows, hosts columns. values 0 1 binary network represented, otherwise weighted network assumed. at_nodes list length 2, output posterior_at_nodes(). tree phylogeny symbiont clade (e.g. parasites, herbivores). Object class phylo. host_tree phylogeny belonging hosts. Object class phylo. See examples change color scale. type One 'states' 'repertoires'. 'states', plot presence state posterior probability higher threshold. 'repertoires', plot given repertoire. state state? Default 2. analyses using 3-state model, choose 1 2 (1 potential host 2 actual host). used type 'states'. repertoire Either 'realized' repertoire defined state 2, 'fundamental' repertoire (default) defined state (usually 1 2), 3-state model includes actual potential hosts. modules moduleWeb data.frame object defining modules network. data.frame passed, must contain three columns: $name taxon names, $module module taxon assigned , $type defines taxon \"host\" \"symbiont\". module_order character vector giving order modules plotted. contain module . find_modules Logical. Search modules nothing provided modules? threshold posterior probability ancestral states shown. Defaults 90% (0.9). Numeric vector length 1. point_size large ancestral state points , default 3. Play dodge_width get pleasing result. Numeric vector length 1. dodge_width far points pushed apart, multiple states single node, default 0.025. Play point_size get pleasing result. Numeric vector length 1. colors Override default colors. character vector many color values modules. ladderize Logical. Whether ladderize tree. Default FALSE. ancestral states automatically colored module. change colors used, can add color scales resulting ggplot, e.g. ggplot2::scale_color_manual().","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_matrix_phylo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a network with modules as an adjacency matrix, with aligned phylogenies. — plot_matrix_phylo","text":"assembly plots, class patchwork.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_matrix_phylo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a network with modules as an adjacency matrix, with aligned phylogenies. — plot_matrix_phylo","text":"","code":"if (FALSE) { # \\dontrun{   # read data that comes with the package   data_path <- system.file(\"extdata\", package = \"evolnets\")   tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\"))   host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\"))   history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)   extant_net <- read.csv(paste0(data_path,\"/interaction_matrix_pieridae.csv\"), row.names = 1)    # calculate posterior probability of interactions at internal nodes   at_nodes <- posterior_at_nodes(history, tree, host_tree, 66 + 1:65)    # plot   plot_matrix_phylo(extant_net, at_nodes, tree, host_tree)   # manual_colors   plot_matrix_phylo(extant_net, at_nodes, tree, host_tree, colors = rainbow(20)) } # }"},{"path":"https://maribraga.github.io/evolnets/reference/plot_network_at_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot one ancestral network with module information at a given time — plot_network_at_age","title":"Plot one ancestral network with module information at a given time — plot_network_at_age","text":"Plot one ancestral network module information given time","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_network_at_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot one ancestral network with module information at a given time — plot_network_at_age","text":"","code":"plot_network_at_age(   subtree,   tip_data,   tgraph,   module_levels,   colors = NULL,   tree,   age,   weighted = TRUE,   weight_range = c(0, 1),   two_state = FALSE,   node_size = NULL,   level_names = c(\"Host\", \"Symbiont\") )"},{"path":"https://maribraga.github.io/evolnets/reference/plot_network_at_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot one ancestral network with module information at a given time — plot_network_at_age","text":"subtree phylo object original tree sliced given time past. tip_data data.frame containing module information tip subtree. tgraph tbl_graph containing nodes edges ancestral network module information node. module_levels Order modules organized. Affects color module assigned. colors Color vector used plot module information. tree phylogeny symbiont clade (e.g. parasites, herbivores). Object class phylo. age Age ancestral network plotted tittle. weighted Whether network weighted edges. weight_range range weights conscidered width edges. two_state Whether width edges reflect state (instead posterior probability). node_size Size nodes every network. NULL, default size plotted. level_names Optional string vector two elements used legend: name clade modeled \"host\" name clade modeled \"symbiont\".","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_network_at_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot one ancestral network with module information at a given time — plot_network_at_age","text":"assembly plots, class patchwork.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/plot_network_at_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot one ancestral network with module information at a given time — plot_network_at_age","text":"","code":"if (FALSE) { # \\dontrun{ plot_network_at_age(subtree, tip_data, tgraph, module_levels, colors, tree, age) } # }"},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_ages.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the posterior probability of ancestral host repertoires at time points in the past (ages) — posterior_at_ages","title":"Calculate the posterior probability of ancestral host repertoires at time points in the past (ages) — posterior_at_ages","text":"Calculate posterior probability ancestral host repertoires time points past (ages)","code":""},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_ages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the posterior probability of ancestral host repertoires at time points in the past (ages) — posterior_at_ages","text":"","code":"posterior_at_ages(   history,   ages,   tree,   host_tree,   extant_prob = FALSE,   state = 2,   drop_empty = TRUE )"},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_ages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the posterior probability of ancestral host repertoires at time points in the past (ages) — posterior_at_ages","text":"history Data frame posterior samples interaction histories. Output read_history(). ages Vector ages (time points past) samples retrieved. present (age = 0) must included. tree Symbiont tree. host_tree Host tree. extant_prob posterior probabilities calculated extant network? Default FALSE. TRUE makes sense interactions extant network also inferred. FALSE, first MCMC sample retrieved age = 0. state state? Default 2. analyses using 3-state model, give c(1, 2) include states (1 potential host 2 actual host). drop_empty Logical. Remove taxa without interactions?","code":""},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_ages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the posterior probability of ancestral host repertoires at time points in the past (ages) — posterior_at_ages","text":"list three lists, containing: \"samples\" Arrays samples x nodes x hosts, containing state sample. \"post_states\" Arrays nodes x hosts x state containing posterior probability state. \"post_repertoires\" Arrays nodes x hosts x repertoire containing posterior probability 1) \"realized\" repertoire defined state 2, 2) \"fundamental\" repertoire defined state (usually 1 2). array lists one ages. number samples number iterations history.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_ages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the posterior probability of ancestral host repertoires at time points in the past (ages) — posterior_at_ages","text":"","code":"# read symbiont and host tree data_path <- system.file(\"extdata\", package = \"evolnets\") tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\")) host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\"))  # read histories sampled during MCMC history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)  # get samples at ages ages <- c(80,70,0) at_ages <- posterior_at_ages(history, ages, tree, host_tree) samples_at_ages <- at_ages$samples  # get posterior probabilities of states at ages pp_at_ages <- at_ages$post_states"},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the posterior probability of ancestral host repertoires — posterior_at_nodes","title":"Calculate the posterior probability of ancestral host repertoires — posterior_at_nodes","text":"Group functions calculate posterior probabilities ancestral host repertoires internal nodes symbiont tree.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the posterior probability of ancestral host repertoires — posterior_at_nodes","text":"","code":"posterior_at_nodes(history, tree, host_tree, nodes = NULL, state = c(2))"},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the posterior probability of ancestral host repertoires — posterior_at_nodes","text":"history Data frame posterior samples interaction histories returned read_history(). tree Symbiont tree host_tree Host tree nodes Vector internal nodes calculate posterior probability state. state state? Default 2. analyses using 3-state model, give c(1, 2) include states (1 potential host 2 actual host).","code":""},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the posterior probability of ancestral host repertoires — posterior_at_nodes","text":"list three elements: \"samples\" array samples x nodes x hosts, containing state sample. \"post_states\" array nodes x hosts x state containing posterior probability state. \"post_repertoires\" array nodes x hosts x repertoire containing posterior probability 1) \"realized\" repertoire defined state 2, 2) \"fundamental\" repertoire defined state (usually 1 2). number samples number iterations history.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/posterior_at_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the posterior probability of ancestral host repertoires — posterior_at_nodes","text":"","code":"# read parasite and host tree data_path <- system.file(\"extdata\", package = \"evolnets\") tree <- read_tree_from_revbayes(paste0(data_path,\"/tree_pieridae.tre\")) host_tree <- ape::read.tree(paste0(data_path,\"/host_tree_pieridae.phy\"))  # read histories sampled during MCMC history <- read_history(paste0(data_path,\"/history_thin_pieridae.txt\"), burnin = 0)  # calculate the posterior probability of host repertoires # at chosen internal nodes of the parasite tree nodes <- c(129:131) pp_at_nodes <- posterior_at_nodes(history, tree, host_tree, nodes)"},{"path":"https://maribraga.github.io/evolnets/reference/read_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Read history.txt file produced by RevBayes — read_history","title":"Read history.txt file produced by RevBayes — read_history","text":"Read history.txt file containing posterior samples interaction histories","code":""},{"path":"https://maribraga.github.io/evolnets/reference/read_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read history.txt file produced by RevBayes — read_history","text":"","code":"read_history(path_to_hist, burnin = 0.1)"},{"path":"https://maribraga.github.io/evolnets/reference/read_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read history.txt file produced by RevBayes — read_history","text":"path_to_hist String path .txt file exported RevBayes burnin Fraction iterations removed burnin. Default 10%.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/read_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read history.txt file produced by RevBayes — read_history","text":"data.frame","code":""},{"path":"https://maribraga.github.io/evolnets/reference/read_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read history.txt file produced by RevBayes — read_history","text":"","code":"# read history file if (FALSE) history <- read_history(\"/path/history.txt\", burnin = 0.2) # \\dontrun{}"},{"path":"https://maribraga.github.io/evolnets/reference/read_tree_from_revbayes.html","id":null,"dir":"Reference","previous_headings":"","what":"Read symbiont tree file produced by RevBayes containing node indices — read_tree_from_revbayes","title":"Read symbiont tree file produced by RevBayes containing node indices — read_tree_from_revbayes","text":"Read symbiont tree file produced RevBayes containing node indices","code":""},{"path":"https://maribraga.github.io/evolnets/reference/read_tree_from_revbayes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read symbiont tree file produced by RevBayes containing node indices — read_tree_from_revbayes","text":"","code":"read_tree_from_revbayes(path_to_tree)"},{"path":"https://maribraga.github.io/evolnets/reference/read_tree_from_revbayes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read symbiont tree file produced by RevBayes containing node indices — read_tree_from_revbayes","text":"path_to_tree String path .txt file exported RevBayes","code":""},{"path":"https://maribraga.github.io/evolnets/reference/read_tree_from_revbayes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read symbiont tree file produced by RevBayes containing node indices — read_tree_from_revbayes","text":"phylo object node names given RevBayes, important place inferred ancestral states symbiont tree.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/read_tree_from_revbayes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read symbiont tree file produced by RevBayes containing node indices — read_tree_from_revbayes","text":"","code":"if (FALSE) tree <- read_tree_from_revbayes(\"symbiont_tree.tre\") # \\dontrun{}"},{"path":"https://maribraga.github.io/evolnets/reference/support_for_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate support for modules from summary networks based on modules of sampled networks — support_for_modules","title":"Calculate support for modules from summary networks based on modules of sampled networks — support_for_modules","text":"Validate modules summary networks calculating frequency pairs nodes placed module networks sampled across MCMC","code":""},{"path":"https://maribraga.github.io/evolnets/reference/support_for_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate support for modules from summary networks based on modules of sampled networks — support_for_modules","text":"","code":"support_for_modules(   mod_samples,   modules_across_ages,   threshold = 0.7,   edge_list = TRUE,   include_all = FALSE,   colors = NULL,   module_levels = NULL,   axis_text = FALSE )"},{"path":"https://maribraga.github.io/evolnets/reference/support_for_modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate support for modules from summary networks based on modules of sampled networks — support_for_modules","text":"mod_samples Data frame produced modules_from_samples() containing module membership node sampled network time slice present. modules_across_ages Data frame containing module information summary network. list object returned modules_across_ages() data.frame object defining modules networks. data.frame passed, must contain three columns: $age - age network, $name - taxon names, $module - module taxon assigned . threshold Minimum frequency two nodes placed module consider supported. pairs frequency higher threshold plotted color module summary network. edge_list Logical. Whether return list edge lists list matrices pairwise frequency. include_all Logical. Include nodes present time slice? colors Optional. Vector module colors plot. module_levels Optional. Order modules color vector. axis_text Logical. Plot taxon names?","code":""},{"path":"https://maribraga.github.io/evolnets/reference/support_for_modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate support for modules from summary networks based on modules of sampled networks — support_for_modules","text":"list containing: plot: plot pairwise frequency two nodes placed module ancestral network time slice ages. Cells diagonal show often host sampled network (symbionts always present); pairwise_membership: list edge lists matrices pairwise frequencies time slice; mean_support: list mean geometric mean pairwise frequency module time slice.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/support_for_modules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate support for modules from summary networks based on modules of sampled networks — support_for_modules","text":"","code":"if (FALSE) { # \\dontrun{   ages <- c(60, 50, 40, 0)   at_ages <- posterior_at_ages(history, ages, tree, host_tree)    weighted_net_50 <- get_summary_network(at_ages, pt = 0.5, weighted = TRUE)   all_mod <- modules_across_ages(weighted_net_50, tree)    # find modules for each sampled network   mod_samples <- modules_from_samples(at_ages)    # calculate support   support <- support_for_modules(mod_samples, all_mod)   support$plot   support$means } # }"},{"path":"https://maribraga.github.io/evolnets/reference/tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Pieridae tree — tree","title":"Pieridae tree — tree","text":"Pieridae tree","code":""},{"path":"https://maribraga.github.io/evolnets/reference/tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pieridae tree — tree","text":"","code":"tree"},{"path":"https://maribraga.github.io/evolnets/reference/tree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pieridae tree — tree","text":"tree: phylogenetic tree Pieridae genera 66 tips.","code":""},{"path":"https://maribraga.github.io/evolnets/reference/tree.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pieridae tree — tree","text":"https://onlinelibrary.wiley.com/doi/10.1111/ele.13842","code":""}]
